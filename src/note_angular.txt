Angular  
-------
--> is a framework used to create frond-end of web applications

-->  html , css , TypeScript

--> transpiling (process of converting ts-->js)
    ---- 
-->npm = node package module =>tool used to install third party libraries and 

CLI - Command Line Interpretter
---
=> install angular --> npm i -g @angular/cli@latest

Life Cycle of Angular Project
------------------------------

constructor --> ngOnInit---->other methods

angular

create project
    : ng new prjctname

clear errors/warning 
    : npm i --force

project running 
    : ng serve --open

==> Structure

-> src : main folder
        whenever we create an angular project it provides
        1. root module and 2. root component

        root module : app.module.ts

 ----> @ngModule ==> Decorators : having @
                   
        root component :3 files 
                       :app.component.css
                        app.component.html
                        app.component.ts  (selector)
                        and also specification file
                        app.component.spec.ts
        -> asset : store imge video audio files                       

-> .angular : angular and angular CLI(configurationsand functions between)
            : automatically created and no need to change
            
-> .vscode  : configurations between vscode and angular app          

-> node_modules : whenever we install third party(ertra/external) modules/libraries node_modules
                 also store copy of it

->.editorconfig : configurationsof editor (here it is vscode configurations)

-> .gitignore : store the files which are no need to push into git

->angular.json : details of angular project

-> package.json : store the versions of third party libraries or whatever it stores the version

-> Readme.md  : details of project

->tscongig.app.json : config of ts
->tsconfig.json:
->tsconfig.spec.json:



data binding techniques
---------------------------
methods used to access data

-> html file - view
-> ts file ->component

1. One Way Binding 
-------------------
     1.1 component to view data sharing

            1.1.1 string interpollation ->      {{}}
            1.1.2 property binding ->           [property] = ""

     1.2 view to component data sharing 

            1.2.1 event bonding ->              (event) = "method()"
            1.2.2 event binding using $event    (event) = method($event)
            1.2.3 event binding with template rendering variable   #variable

2. two way Binding
-------------------
      2.1 ngModel             [(ngmodel)]="property"    needs formsModule
        

Redirection in Angular
----------------------
module - AppRoutingModule
Router - a class used to Redirection
methods - navigateByUrl


methods---inside--->a class ----inside--->a module(file)---->inside a package(folder)


Dependency Injection
---------------------

to share datas from one class to another class

inside constructor
    -> access specifier       Reference : Classname
       --> private/public

  Reference.method()

  Angular Services
  -----------------
  to store redentent data and methods     
  all the components can access the datas and methods defined in service file easily

  - ng g c s <service_name>

  angular Direectives  to manipulate DOM
  --------------------------------------

  1.Component Direectives
  2.Structure Direectives  *ngFor *ngIf
  3.attrbute Direectives   [ngClass]
     
     Validation
     -----------
=>form creation in angular
     1.template driven form
     2.model driven forms
       1.reactive form- used to create model of the form
       reactive form contains 
             -group -array -control
     =>ReactiveFormsmodule -module
     =>FormBuilder      -class used to crete model form
     =>group()          - method to create model


=> localStorage in angular
---------------------------
localStorage.getItem()
localStorage.setItem()
localStorage.removeItem()


=>json - stringify- used to convert to json
parse - convert from json

parent-child communication
---------------------------

@input== parent to child data sharing
@output== child to parent data sharing

sharing data from parent to child
<selectorname [child Variable Name]="parent variable name"></selectorname>

Event creation in angular
--------------------------
 we can create our own events in angular

 EventEmitter - class used to used to create userdefined events
                  
                  eventname=new EventEmitter()

                  emit() to define the wrking time



Date and time
-------------
class = date

Angular Pipes
-------------
to convert dates into another format

pipe creation
--------------

-ng g pipe <pipename>

DatePipe
syntax:

{{ value_expression | date [ : format [ : timezone [ : locale ] ] ] }}


lazy loading
------------
provide less loading time for high traffic pages

create lazy module - 
                   ng g module <module name> --route <module name> --module app.module


json server
------------
1.install server
  npm i --save json-server

2.run server in server file location 
  npx json-server --watch db.json --port 3000



Behaviour Subject
-----------------
> to share data between modules 

> this is a asynchronous method 

> rxjs [Reactive Extension for javaScript] library name of behaviour subject
    
     - rxjs is used to handle async implementations in angular

Activater Route in Angular
--------------------------

> used to access data from URLs (access params)
                              -(data inside urls =params)
class     = ActivatedRoute
method    = params()

> its a asyncronous method  bcoz from url